
1. Set Matrix zero 
Approach-First of all create two vectors rowmarker and columnmarker to store the positions of column and row where the element is zero.
If element in either row marker or columnmarker is 0.Then make the element in the whole matrix 0.

class Solution {
public:
     void setZeroes(vector<vector<int>>& matrix) {     
        int rowsize=matrix.size(); 
        int columnsize=matrix[0].size(); 
        vector<int>rowmarker(rowsize,1);
        vector<int>columnmarker(columnsize,1); 
        for(int i=0;i<rowsize;i++)
        {
            for(int j=0;j<columnsize;j++)
            {
                if(matrix[i][j]==0)
                {
                    rowmarker[i]=0; 
                    columnmarker[j]=0;
                }
            }
        } 
        for(int i=0;i<rowsize;i++)
        {
            for(int j=0;j<columnsize;j++)
            {
                if(rowmarker[i]==0 or columnmarker[j]==0)
                    matrix[i][j]=0;
             }
        }
        
    }
};


2. Pascal's Triangle 

vector<vector<int>> generate(int numRows) {
	vector<vector<int>> ret;
	for (int i = 0; i < numRows; i++) {
		vector<int> row(i + 1, 1);
		for (int j = 1; j < i; j++) {
			row[j] = ret[i - 1][j] + ret[i - 1][j - 1];
		}
		ret.push_back(row);
	}
	return ret;
}



4. Kadane's Algorithm
Maximum Subarray Problem 
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
    int m = INT_MIN;
        int sum = 0;
        for(int i=0; i<nums.size(); i++){
            sum+=nums[i];
            if(m<sum){
                m = sum ;
            }
            if(sum < 0){
                sum = 0;
            }
        }
        return m;
    }
};


5. Sort an array of 0's,1's & 2's

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int low = 0, mid = 0;
        int high = nums.size()-1;
        while(mid <= high){
            switch(nums[mid]){
                case 0 : 
                    swap(nums[low++],nums[mid++]);
                    
                    break;
                case 1:
                    mid++;
                    break;
                case 2:
                    swap(nums[mid],nums[high--]);
                
                    break;
            }
        }
    }
};


6. Stock Buy and sell

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int maxprofit = 0;
        int min1 = INT_MAX;
        for(int i=0; i<prices.size(); i++){
            min1 = min(min1,prices[i]);
            maxprofit = max(maxprofit , prices[i]-min1);
        }
        return maxprofit;
    }
};
